import tkinter as tk
from tkinter import messagebox
import random
import string

class PasswordGenerator:
    def __init__(self, root):
        self.root = root
        self.root.title("Random Password Generator")

        # Create input fields and labels
        self.length_label = tk.Label(root, text="Password Length:")
        self.length_label.pack()
        self.length_entry = tk.Entry(root, width=20)
        self.length_entry.pack()
        self.length_entry.insert(0, "12")  # default value

        self.character_sets_frame = tk.Frame(root)
        self.character_sets_frame.pack()

        self.uppercase_var = tk.IntVar()
        self.uppercase_checkbox = tk.Checkbutton(self.character_sets_frame, text="Uppercase Letters", variable=self.uppercase_var)
        self.uppercase_checkbox.pack(side=tk.LEFT)
        self.uppercase_checkbox.select()  # default value

        self.lowercase_var = tk.IntVar()
        self.lowercase_checkbox = tk.Checkbutton(self.character_sets_frame, text="Lowercase Letters", variable=self.lowercase_var)
        self.lowercase_checkbox.pack(side=tk.LEFT)
        self.lowercase_checkbox.select()  # default value

        self.numbers_var = tk.IntVar()
        self.numbers_checkbox = tk.Checkbutton(self.character_sets_frame, text="Numbers", variable=self.numbers_var)
        self.numbers_checkbox.pack(side=tk.LEFT)
        self.numbers_checkbox.select()  # default value

        self.special_chars_var = tk.IntVar()
        self.special_chars_checkbox = tk.Checkbutton(self.character_sets_frame, text="Special Characters", variable=self.special_chars_var)
        self.special_chars_checkbox.pack(side=tk.LEFT)

        # Create generate button
        self.generate_button = tk.Button(root, text="Generate Password", command=self.generate_password)
        self.generate_button.pack()

        # Create password display label
        self.password_label = tk.Label(root, text="Generated Password:")
        self.password_label.pack()
        self.password_display = tk.Label(root, text="", wraplength=400)
        self.password_display.pack()

    def generate_password(self):
        try:
            length = int(self.length_entry.get())
            if length < 1:
                messagebox.showerror("Error", "Password length must be a positive integer")
                return
        except ValueError:
            messagebox.showerror("Error", "Password length must be an integer")
            return

        char_sets = []
        if self.uppercase_var.get():
            char_sets.append(string.ascii_uppercase)
        if self.lowercase_var.get():
            char_sets.append(string.ascii_lowercase)
        if self.numbers_var.get():
            char_sets.append(string.digits)
        if self.special_chars_var.get():
            char_sets.append(string.punctuation)

        if not char_sets:
            messagebox.showerror("Error", "Must select at least one character set")
            return

        password = []
        for _ in range(length):
            password.append(random.choice(''.join(char_sets)))

        random.shuffle(password)
        password = ''.join(password)

        self.password_display.config(text=password)

if __name__ == "__main__":
    root = tk.Tk()
    app = PasswordGenerator(root)
    root.mainloop()
